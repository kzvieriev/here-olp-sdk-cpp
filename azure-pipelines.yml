trigger:
- master
pr:
- master
schedules:
- cron: "0 0 * * *"
  displayName: Nightly build
  branches:
    include:
    - master

variables:
  BUILD_TYPE: "RelWithDebInfo"

jobs:
- job: Windows_build
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - bash: scripts/windows/build.sh

- job: MacOS_build
  pool:
    vmImage: 'macOS-10.14'
  steps:
  - bash: scripts/macos/psv/azure_macos_build_psv.sh

- job: iOS_build
  pool:
    vmImage: 'macOS-10.14'
  steps:
  - bash: scripts/ios/azure_ios_build_psv.sh

- job: Android_build
  pool:
    vmImage: 'ubuntu-18.04'
  variables:
    ANDROID_NDK_HOME: $(ANDROID_HOME)/ndk-bundle
    LD_PRELOAD: "/lib/x86_64-linux-gnu/libSegFault.so"
    SEGFAULT_SIGNALS: "all"
  steps:
    - bash: ls -la $(ANDROID_NDK_HOME)/build/cmake/android.toolchain.cmake
      displayName: Verification of cmake script exist.
    - bash: ANDROID_NDK_HOME=$(ANDROID_NDK_HOME) && scripts/android/build.sh
      displayName: Android build and Examples.
- job: Linux_build_clang
  pool:
    vmImage: 'ubuntu-18.04'
  variables:
    LD_PRELOAD: "/lib/x86_64-linux-gnu/libSegFault.so"
    SEGFAULT_SIGNALS: "all"
  steps:
    - script: |
        sudo apt-get install -y --no-install-recommends ccache libcurl4-openssl-dev
      displayName: 'Install dependencies'
    - bash: scripts/linux/psv/travis_build_psv.sh
      displayName: 'Linux Build'
- job: Linux_build_gcc_test
  pool:
    vmImage: 'ubuntu-18.04'
  variables:
    LD_PRELOAD: "/lib/x86_64-linux-gnu/libSegFault.so"
    SEGFAULT_SIGNALS: "all"
    BUILD_TYPE: "COVERAGE"
  steps:
  - script: |
      sudo apt-get install -y --no-install-recommends ccache libcurl4-openssl-dev
    displayName: 'Install dependencies'
  - bash: scripts/linux/psv/travis_build_psv.sh && scripts/linux/psv/travis_test_psv.sh
    displayName: 'Linux Build and Smoke Tests'